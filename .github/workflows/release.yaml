permissions:
  # This is required for requesting the OIDC token
  id-token: write

on:
  workflow_call:
    inputs:
      ref:
        type: string
        required: true
      java-version:
        type: string
        required: true
      crypto-type:
        type: string
        required: true
      is-snapshot:
        type: string
        required: true
    secrets:
      GPG_SECRET_KEY_ORG:
        required: true
      GPG_PASS_ORG:
        required: true
      JFROG_OIDC_PROVIDER:
        required: true
      JFROG_OIDC_AUDIENCE:
        required: true

jobs:
  build:
    runs-on: ${{ vars.BUILD_CONTAINER_DISTRO_VERSION }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ inputs.ref }}

      - name: Gpg debug step
        shell: bash
        run: |
          gpg --version

      # Java plugin will setup gpg but we are not using maven to deploy do JFrog.
      # - jf mvn clean install on publish does not publish POM we would like to publish
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: "semeru"
          java-version: ${{ inputs.java-version }}
          gpg-private-key: ${{ secrets.GPG_SECRET_KEY_ORG }}
          gpg-passphrase: GPG_PASS

      - name: Get release or snapshot-version
        id: get-release-version
        shell: bash
        run: |
          IS_SNAPSHOT=${{ inputs.is-snapshot }}
          if [ $IS_SNAPSHOT == 'true' ];then
            echo release-version="$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)-SNAPSHOT_$GITHUB_SHA" >> $GITHUB_OUTPUT
          else
            echo release-version="$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)" >> $GITHUB_OUTPUT
          fi

      - name: Set version
        shell: bash
        run: |
          ./set_version ${{ steps.get-release-version.outputs.release-version }}

      - name: Build all modules
        shell: bash
        run: mvn clean install -P ${{ inputs.crypto-type }} # The crypto profile is usually set with set_crypto but since we need to toggle multiple profiles set_crypto option is not being picked up

      - name: Stage artifacts for publish
        working-directory: client
        shell: bash
        run: mvn clean source:jar javadoc:jar install -P gpg -P ${{ inputs.crypto-type }} # The crypto profile is usually set with set_crypto but since we need to toggle multiple prfiles set_crypto option is not being picked up
        env:
          GPG_PASS: ${{ secrets.GPG_PASS_ORG }}

      - name: Get artifact name
        id: get-artifact-name
        working-directory: client
        run: |
          echo artifact-name=$(mvn help:evaluate -Dexpression=project.build.finalName -P ${{ inputs.crypto-type }} -q -DforceStdout) >> $GITHUB_OUTPUT

      - name: Get artifact ID
        id: get-artifact-id
        working-directory: client
        run: |
          echo artifact-id="aerospike-client${{ inputs.crypto-type == 'bouncycastle' && '-bc' || '' }}-jdk${{ inputs.java-version }}" >> $GITHUB_OUTPUT

      - name: Get artifact version
        id: get-artifact-version
        working-directory: client
        run: |
          echo artifact-version=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout) >> $GITHUB_OUTPUT

      - name: Stage to local repo
        working-directory: client
        run: |
          converted_java_version=${{ inputs.java-version == '1.8' && '8' || inputs.java-version }} 
          mkdir ${{ github.workspace }}/local_repo

          mvn deploy:deploy-file \
            -DpomFile=deploy-resources/${{ inputs.crypto-type }}_pom.xml \
            -DrepositoryId=local \
            -Durl=file://${{ github.workspace }}/local_repo \
            -Dfile=target/aerospike-client${{ inputs.crypto-type == 'bouncycastle' && '-bc' || '' }}-jdk${converted_java_version}-${{ steps.get-artifact-version.outputs.artifact-version }}.jar \
            -DartifactId=aerospike-client${{ inputs.crypto-type == 'bouncycastle' && '-bc' || '' }}-jdk${converted_java_version} \
            -Dversion=${{ steps.get-artifact-version.outputs.artifact-version }} \
            -Dpackaging=jar \
            -Dfiles=target/aerospike-client${{ inputs.crypto-type == 'bouncycastle' && '-bc' || '' }}-jdk${converted_java_version}-${{ steps.get-artifact-version.outputs.artifact-version }}-jar-with-dependencies.jar,target/aerospike-client${{ inputs.crypto-type == 'bouncycastle' && '-bc' || '' }}-jdk${converted_java_version}-${{ steps.get-artifact-version.outputs.artifact-version }}-sources.jar,target/aerospike-client${{ inputs.crypto-type == 'bouncycastle' && '-bc' || '' }}-jdk${converted_java_version}-${{ steps.get-artifact-version.outputs.artifact-version }}-javadoc.jar,target/aerospike-client${{ inputs.crypto-type == 'bouncycastle' && '-bc' || '' }}-jdk${converted_java_version}-${{ steps.get-artifact-version.outputs.artifact-version }}-javadoc.jar.asc,target/aerospike-client${{ inputs.crypto-type == 'bouncycastle' && '-bc' || '' }}-jdk${converted_java_version}-${{ steps.get-artifact-version.outputs.artifact-version }}.jar.asc,target/aerospike-client${{ inputs.crypto-type == 'bouncycastle' && '-bc' || '' }}-jdk${converted_java_version}-${{ steps.get-artifact-version.outputs.artifact-version }}.pom.asc,target/aerospike-client${{ inputs.crypto-type == 'bouncycastle' && '-bc' || '' }}-jdk${converted_java_version}-${{ steps.get-artifact-version.outputs.artifact-version }}-sources.jar.asc,target/aerospike-client${{ inputs.crypto-type == 'bouncycastle' && '-bc' || '' }}-jdk${converted_java_version}-${{ steps.get-artifact-version.outputs.artifact-version }}-jar-with-dependencies.jar.asc \
            -Dclassifiers=jar-with-dependencies,sources,javadoc,,,,, \
            -Dtypes=jar,jar,jar,asc,asc,asc,asc,asc

      - name: Publish to JFrog
        uses: ./.github/actions/publish-to-jfrog
        with:
          crypto-type: ${{ inputs.crypto-type }}
          oidc-provider: ${{ secrets.JFROG_OIDC_PROVIDER }}
          oidc-audience: ${{ secrets.JFROG_OIDC_AUDIENCE }}
          artifact-name: ${{ steps.get-artifact-name.outputs.artifact-name }}
          artifact-id: ${{ steps.get-artifact-id.outputs.artifact-id }}
          artifact-version: ${{ steps.get-artifact-version.outputs.artifact-version }}
          package-install-location: ${{ github.workspace }}/local_repo
