name: "Run EE Server"
description: "Run EE server. Returns once server is ready. Only tested on Linux and macOS"

inputs:
  # All inputs in composite actions are strings
  use-server-rc:
    description: Flag for rc candidates
    required: true
    default: "false"
  server-tag:
    description: Server version to use
    required: false
    default: "latest"
  container-repo-url:
    required: false
    description: Container repo url
    default: aerospike.jfrog.io/docker/
  jfrog-platform-url:
    description: ""
    required: false
    default: https://aerospike.jfrog.io
  oidc-provider:
    description: ""
    required: true
  oidc-audience:
    description: ""
    required: true
  container-name:
    default: aerospike
    required: false
    description: Name for test container

runs:
  using: "composite"
  steps:
    - name: Set up JFrog credentials
      id: setup-jfrog-cli
      uses: jfrog/setup-jfrog-cli@v4
      env:
        JF_URL: ${{ inputs.jfrog-platform-url }}
      with:
        oidc-provider-name: ${{ inputs.oidc-provider }}
        oidc-audience: ${{ inputs.oidc-audience }}

    - if: ${{ inputs.use-server-rc == 'true' }}
      run: docker login ${{ inputs.container-repo-url }} --username ${{ steps.setup-jfrog-cli.outputs.oidc-user }} --password ${{ steps.setup-jfrog-cli.outputs.oidc-token }}
      shell: bash

    - run: echo IMAGE_NAME=${{ inputs.use-server-rc == 'true' && inputs.container-repo-url || '' }}aerospike/aerospike-server-enterprise${{ inputs.use-server-rc == 'true' && '-rc' || '' }}:${{ inputs.server-tag }} >> $GITHUB_ENV
      shell: bash

    - run: docker run -d --name ${{ inputs.container-name }} -p 3000:3000 ${{ env.IMAGE_NAME }}
      shell: bash

    - uses: ./.github/actions/wait-for-as-server-to-start
      with:
        container-name: ${{ inputs.container-name }}
        is-security-enabled: true
        is-strong-consistency-enabled: true

    - run: docker exec ${{ inputs.container-name }} asadm --enable -e 'asinfo -v "roster-set:namespace=test;nodes=A1"'
      shell: bash

    - run: docker exec ${{ inputs.container-name }} asadm --enable -e 'asinfo -v revive:'
      shell: bash

    - run: docker exec ${{ inputs.container-name }} asadm --enable -e 'asinfo -v recluster:'
      shell: bash

    - run: docker logs ${{ inputs.container-name }}
      shell: bash
