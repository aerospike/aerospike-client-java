name: Publish artifacts to github
description: "Publish artifacts to github"

inputs:
  staging-folder:
    description: ""
    required: false
    default: staging
  target-folder:
    description: ""
    required: false
    default: github
  release-notes:
    description: "Release notes"
    required: true
  github-token:
    description: "Github auth token"
    required: true
  artifact-version:
    description: "Version of the artifact to release"
    required: true
  build-name-number:
    description: "String containing build name, number and jdk versions"
    required: true

runs:
  using: "composite"
  steps:
    - name: Debug publish to github
      shell: bash
      run: |
        echo "${{ inputs.staging-folder }}"
        echo "${{ inputs.target-folder }}"
        echo "${{ inputs.artifact-version }}"
        echo "${{ inputs.release-notes }}"
        echo "${{ inputs.build-name-number }}"

    - id: get-jdk-version
      shell: bash
      run: |
        # Building array from json input
        JDK_VERSIONS=($(echo "${{ inputs.build-name-number }}" | jq -r '.[] | match("jdk[^/]+").string'))

        # Creating count of number of unique jdk versions
        UNIQUE_COUNT=$(printf "%s\n" "${JDK_VERSIONS[@]}" | sort -u | wc -l)

        # If the input contains more than one JDK version we know this case cannot exists therefore exit with error
        if [ "$UNIQUE_COUNT" -eq 1 ]; then
          # All JDK versions are the same: ${JDK_VERSIONS[0]}
          echo jdk-version="${JDK_VERSIONS[0]}" >> $GITHUB_OUTPUT
        else
          echo "Found multiple JDK versions: ${JDK_VERSIONS[*]}"
          exit 1
        fi

    - id: get-artifact-version
      shell: bash
      run: |
        VERSION=$(echo "${{ inputs.artifact-version }}" | jq -r '.[]')
        echo artifact-version="${VERSION}" >> $GITHUB_OUTPUT

    - name: Create upload archive for github
      id: create-artifact
      shell: bash
      run: |
        src="${{ inputs.staging-folder }}"
        dest="${{ inputs.target-folder }}"

        find "$src" -type f \
          -exec cp {} "$dest" \;

    # Listing staged artifacts to be uploaded
    - id: get-github-release-artifact-names
      working-directory: ${{ inputs.target-folder }}
      shell: bash
      run: |
        ARTIFACTS=$(ls | sed 's/^/${{ inputs.target-folder }}\//')

        echo "release-artifacts<<EOF" >> $GITHUB_OUTPUT
        echo "${ARTIFACTS}" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Debug show content of the upload archive
      shell: bash
      run: |
        pwd
        ls ${{ inputs.target-folder }} | sed 's/^//' 

    - name: Debug GitHub publish input
      shell: bash
      working-directory: ${{ inputs.target-folder }}
      run: |
        echo "working directory: ${{ inputs.target-folder }}"
        echo "tag name: Release ${{ inputs.artifact-version }}"
        echo "body: Changes for release ${{ inputs.artifact-version }}"
        echo "body: ${{ inputs.release-notes }}"
        echo "files: ${{ steps.get-github-release-artifact-names.outputs.release-artifacts }}"

    - name: Publish release to github
      uses: softprops/action-gh-release@v2
      with:
        token: ${{ inputs.github-token }}
        tag_name: Release ${{ inputs.artifact-version }}${{ steps.get-jdk-version.outputs.jdk-version == 'jdk8' && '-jdk8' || '' }}
        body: |
          Changes for release ${{ inputs.artifact-version }}
          "${{ inputs.release-notes }}"
        draft: false
        prerelease: false
        files: ${{ steps.get-github-release-artifact-names.outputs.release-artifacts }}
